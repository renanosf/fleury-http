{"version":3,"file":"fleury-http.js","sources":["../../../projects/fleury-http/src/lib/features/httpClient/implementations/http-axios.ts","../../../projects/fleury-http/src/lib/features/httpClient/http-client-factory.ts","../../../projects/fleury-http/src/lib/features/oauth/interfaces/ioauth.ts","../../../projects/fleury-http/src/lib/features/oauth/utils/extract-code.ts","../../../projects/fleury-http/src/lib/features/oauth/utils/base64.ts","../../../projects/fleury-http/src/lib/features/oauth/implementations/oauth-sensedia-service.ts","../../../projects/fleury-http/src/lib/features/oauth/oauth-service.ts","../../../projects/fleury-http/src/lib/features/storage/interfaces/istorage.ts","../../../projects/fleury-http/src/lib/features/storage/implementations/storage-local.ts","../../../projects/fleury-http/src/lib/features/storage/implementations/storage-session.ts","../../../projects/fleury-http/src/lib/features/storage/implementations/storage-memory.ts","../../../projects/fleury-http/src/lib/features/storage/storage-factory.ts","../../../projects/fleury-http/src/lib/interfaces/ifleury-http.ts","../../../projects/fleury-http/src/lib/features/interceptors/pre/validators.ts","../../../projects/fleury-http/src/lib/features/interceptors/pre/modifiers.ts","../../../projects/fleury-http/src/lib/features/interceptors/pos/validators.ts","../../../projects/fleury-http/src/lib/features/interceptors/implementations/interceptor-axios.ts","../../../projects/fleury-http/src/lib/features/interceptors/interceptor-service.ts","../../../projects/fleury-http/src/lib/features/events/fleury-http-events.ts","../../../projects/fleury-http/src/lib/fleury-http.ts","../../../projects/fleury-http/src/public-api.ts","../../../projects/fleury-http/src/fleury-http.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { IHttpClientService, FleuryHttpResponse } from '../interfaces/ihttp-client';\r\n\r\nexport class HttpAxios implements IHttpClientService {\r\n    private axiosInstance: AxiosInstance;\r\n    constructor(private baseUrl: string) {\r\n        this.axiosInstance = axios.create({\r\n            baseURL: this.baseUrl\r\n        });\r\n    }\r\n\r\n    async post(uri: string, data?: any, headers?: {[key: string]: string}): Promise<FleuryHttpResponse> {\r\n        const response = await this.axiosInstance.post(uri, data, {\r\n            headers,\r\n        });\r\n\r\n        const fleuryResponse: FleuryHttpResponse = {\r\n            body: response.data,\r\n            headers: response.headers,\r\n            status: response.status,\r\n            statusText: response.statusText,\r\n        };\r\n\r\n        return fleuryResponse;\r\n    }\r\n}\r\n","import { IFleuryHttp } from '../../interfaces/ifleury-http';\r\nimport { HttpAxios } from './implementations/http-axios';\r\n\r\nexport default class HttpClientFactory {\r\n    public static createHttpService(config: IFleuryHttp): HttpAxios {\r\n        return new HttpAxios(config.baseUrl);\r\n    }\r\n}\r\n","export interface IOauthService {\r\n    callGrantCode();\r\n    callAccessToken(code: string);\r\n}\r\n\r\nexport interface IOauthApplication {\r\n    clientId: string;\r\n    secret?: string;\r\n}\r\n\r\nexport enum OauthFlows {\r\n    GRANT,\r\n    IMPLICIT\r\n}\r\n\r\nexport interface IOauth {\r\n    application: IOauthApplication;\r\n    flow: OauthFlows;\r\n}\r\n\r\nexport interface IOauthToken {\r\n    accessToken: string;\r\n    expires: number;\r\n    refreshToken?: string;\r\n}","export const extractCode = (key: string, redirectUrl:string) => {\r\n    const index = redirectUrl.indexOf(key) + key.length;\r\n    return redirectUrl.substring(index);\r\n};\r\n","const isBrowser=new Function(\"try {return this===window;}catch(e){ return false;}\");\r\n\r\nexport const toBase64 = (str: string) => {\r\n    if (isBrowser()) return btoa(str);\r\n    else return new Buffer(str).toString('base64');\r\n}","import { IOauthService, IOauthApplication } from '../interfaces/ioauth';\r\nimport { IFleuryHttp } from '../../../interfaces/ifleury-http';\r\nimport { IHttpClientService } from '../../httpClient/interfaces/ihttp-client';\r\nimport { extractCode } from '../utils/extract-code';\r\nimport { toBase64 } from '../utils/base64';\r\n\r\nexport class OauthSensediaService implements IOauthService {\r\n    private appConfig: IOauthApplication;\r\n    \r\n    constructor(private config: IFleuryHttp, private http: IHttpClientService) {\r\n        this.appConfig = this.config.oauth.application;\r\n    }\r\n\r\n    async callGrantCode(): Promise<string> {\r\n        const response = await this.http.post(\r\n            '/oauth/grant-code',\r\n            {\r\n                client_id: this.appConfig.clientId,\r\n                redirect_uri: `${this.config.baseUrl}/oauth/access-token`,\r\n            },\r\n        );\r\n\r\n        if (response.status === 201) {\r\n            const code = extractCode('?code=', response.body.redirect_uri);\r\n            return code;\r\n        } else {\r\n            throw new Error('Unable to call grant');\r\n        }\r\n    }\r\n\r\n    async callAccessToken(code: string): Promise<any> {\r\n        const key: string = `${this.appConfig.clientId}:${this.appConfig.secret}`;\r\n        const authorization: string = `Basic ${toBase64(key)}`;\r\n        \r\n        const response = await this.http.post(\r\n            '/oauth/access-token',\r\n            {\r\n                grant_type: 'authorization_code',\r\n                code,\r\n            },\r\n            {\r\n                client_id: this.appConfig.clientId,\r\n                Authorization: authorization,\r\n            },\r\n        );\r\n\r\n        if (response.status === 201) {\r\n            return response.body\r\n        } else {\r\n            throw new Error('Unable to call access token');\r\n        }\r\n    }\r\n\r\n    async callAccessTokenImplicit(): Promise<any> {\r\n        const response = await this.http.post(\r\n            '/oauth/access-token',\r\n            {\r\n                client_id: this.appConfig.clientId,\r\n                grant_type: 'implicit',\r\n                recaptcha: true,\r\n                redirect_uri: `${this.config.baseUrl}/oauth/access-token`\r\n            }\r\n        );\r\n\r\n        if (response.status === 201) {\r\n            response.body.access_token = extractCode('?access_token=', response.body.redirect_uri);\r\n            return response.body;\r\n        } else {\r\n            throw new Error('Unable to call access token');\r\n        }\r\n    }\r\n}\r\n","import { OauthFlows, IOauthToken } from './interfaces/ioauth';\r\nimport { IFleuryHttp } from '../../interfaces/ifleury-http';\r\nimport { OauthSensediaService } from './implementations/oauth-sensedia-service';\r\nimport { IHttpClientService } from '../httpClient/interfaces/ihttp-client';\r\nimport { IStorageService } from '../storage/interfaces/istorage';\r\nimport { FleuryHttpEvents } from '../events/fleury-http-events';\r\n\r\nexport class OauthService {\r\n    private oauthProvider: OauthSensediaService;\r\n    private clientId: string;\r\n    private static MILLISECONDS: number = 1000;\r\n    private currentToken: IOauthToken;\r\n\r\n    constructor(\r\n        private config: IFleuryHttp,\r\n        private fleuryHttpEvents: FleuryHttpEvents,\r\n        private httpClientService: IHttpClientService,\r\n        private storageService: IStorageService\r\n    ) {\r\n        this.oauthProvider = new OauthSensediaService(this.config, this.httpClientService);\r\n        this.clientId = this.config.oauth.application.clientId;\r\n        const token = this.storageService.get(this.clientId);\r\n        if (token) this.currentToken = JSON.parse(token);\r\n\r\n        if (this.config.lazyAuhtorization) {\r\n            this.fleuryHttpEvents.isReady.next(true);\r\n        } else {\r\n            if (!this.currentToken) this.refreshToken();\r\n            else this.fleuryHttpEvents.isReady.next(true);\r\n        }\r\n    }\r\n\r\n    private async grantFlow(): Promise<string> {\r\n        const code = await this.oauthProvider.callGrantCode();\r\n        const response = await this.oauthProvider.callAccessToken(code);\r\n        \r\n        this.currentToken = {\r\n            accessToken: response.access_token,\r\n            expires: new Date().getTime() + (response.expires_in * OauthService.MILLISECONDS),\r\n            refreshToken: response.refresh_token\r\n        };\r\n\r\n        console.log(this.currentToken);\r\n\r\n        this.storageService.set(this.clientId, JSON.stringify(this.currentToken));\r\n\r\n        return this.currentToken.accessToken;\r\n    }\r\n\r\n    private async implicitFlow(): Promise<any> {\r\n        const response = await this.oauthProvider.callAccessTokenImplicit();\r\n\r\n        this.currentToken = {\r\n            accessToken: response.access_token,\r\n            expires: new Date().getTime() + (response.expires_in * OauthService.MILLISECONDS),\r\n        };\r\n\r\n        this.storageService.set(this.clientId, JSON.stringify(this.currentToken));\r\n\r\n        return this.currentToken.accessToken;\r\n    }\r\n\r\n    public isTokenValid(): boolean {\r\n        return this.currentToken ? new Date().getTime() < this.currentToken.expires : false;\r\n    }\r\n\r\n    public getAccessToken(): string {\r\n        return this.currentToken.accessToken;\r\n    }\r\n\r\n    public getApplicationId(): string {\r\n        return this.clientId;\r\n    }\r\n\r\n    refreshToken(): void {\r\n        let promise: Promise<any> = null;\r\n        this.fleuryHttpEvents.isReady.next(false);\r\n        \r\n        switch (this.config.oauth.flow) {\r\n            case OauthFlows.IMPLICIT:\r\n                promise = this.implicitFlow();\r\n                break;\r\n            case OauthFlows.GRANT:\r\n            default:\r\n                promise = this.grantFlow();\r\n                break;\r\n        }\r\n\r\n        promise.then(() => {\r\n            this.fleuryHttpEvents.isReady.next(true);\r\n        }).catch((err) => {\r\n            this.fleuryHttpEvents.onError.next(err);\r\n        });\r\n    }\r\n}\r\n","export enum StorageType {\r\n    LocalStorage,\r\n    SessionStorage,\r\n    Memory\r\n}\r\n\r\nexport interface IStorageService {\r\n    get(key: string): any;\r\n    set(key: string, value: string): void;\r\n}\r\n","/* eslint-disable class-methods-use-this */\r\nimport { IStorageService } from '../interfaces/istorage';\r\n\r\nexport class StorageLocal implements IStorageService {\r\n    get(key: string) {\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    set(key: string, value: string) {\r\n        localStorage.setItem(key, value);\r\n    }\r\n}\r\n","/* eslint-disable class-methods-use-this */\r\nimport { IStorageService } from '../interfaces/istorage';\r\n\r\nexport class StorageSession implements IStorageService {\r\n    get(key: string) {\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    set(key: string, value: string) {\r\n        sessionStorage.setItem(key, value);\r\n    }\r\n}\r\n","import { IStorageService } from '../interfaces/istorage';\r\n\r\nexport class StorageMemory implements IStorageService {\r\n    private data: any = {};\r\n\r\n    get(key: string) {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: string, value: string) {\r\n        this.data[key] = value;\r\n    }\r\n}\r\n","import { IFleuryHttp } from '../../interfaces/ifleury-http';\r\nimport { StorageType, IStorageService } from './interfaces/istorage';\r\nimport { StorageLocal } from './implementations/storage-local';\r\nimport { StorageSession } from './implementations/storage-session';\r\nimport { StorageMemory } from './implementations/storage-memory';\r\n\r\nconst providers: any = {};\r\n\r\nexport class StorageFactory {\r\n    public static createStorageService(config: IFleuryHttp): IStorageService {\r\n        switch(config.storageType) {\r\n            case StorageType.Memory:\r\n                return new StorageMemory();\r\n            case StorageType.SessionStorage:\r\n                return new StorageSession();\r\n            case StorageType.LocalStorage:\r\n            default:\r\n                return new StorageLocal();\r\n        }\r\n    }\r\n}","import { IOauth } from '../features/oauth/interfaces/ioauth';\r\nimport { StorageType } from '../features/storage/interfaces/istorage';\r\nimport { AxiosInstance } from 'axios';\r\nimport { IFleuryHttpEvents } from '../features/events/fleury-http-events';\r\n\r\nexport enum InstanceType {\r\n    Axios\r\n}\r\n\r\nexport interface IInstance {\r\n    type?: InstanceType;\r\n    value: AxiosInstance;\r\n}\r\n\r\nexport interface IFleuryHttp {\r\n    oauth: IOauth;\r\n    baseUrl: string;\r\n    instances?: Array<IInstance>\r\n    storageType?: StorageType;\r\n    lazyAuhtorization?: boolean;\r\n}\r\n\r\nexport interface IFleuryHttpConnector {\r\n    addInstance(instance: IInstance): void;\r\n    events: IFleuryHttpEvents\r\n}","import { FleuryInterceptorRequest } from '../interfaces/iintercetors';\r\n\r\n// Se dominio eh o mesmo do gateway entao continuar interceptor\r\n// Se nao possuir dominio incluir a url base\r\nconst verifyDomain = (req: FleuryInterceptorRequest): boolean => {\r\n    if (req.url.indexOf(\"http://\") == 0 || req.url.indexOf(\"https://\") == 0) {\r\n        return req.url.indexOf(req.baseUrl) !== -1;    \r\n    } else {\r\n        return true;\r\n    }\r\n};\r\n\r\n// Se nao encontra whitelabel entao continuar interceptor\r\nconst whiteLabelUris = (req: FleuryInterceptorRequest): boolean => {\r\n    const WHITE_LIST = ['/oauth/'];\r\n    \r\n    return !WHITE_LIST.filter(uri => {\r\n        return req.url.indexOf(uri) !== -1;\r\n    }).length;\r\n}\r\n\r\nexport const preValidators: Array<(req: FleuryInterceptorRequest) => boolean> = [\r\n    verifyDomain,\r\n    whiteLabelUris\r\n];","import { FleuryInterceptorRequest } from '../interfaces/iintercetors';\r\nimport { filter, take, subscribeOn } from 'rxjs/operators';\r\n\r\nconst insertBaseUrl = async (req: FleuryInterceptorRequest): Promise<FleuryInterceptorRequest> => {\r\n    return new Promise((resolve) => {\r\n        req.url = req.url.indexOf(req.baseUrl) === -1 ? req.baseUrl + req.url : req.url;\r\n        resolve(req);\r\n    });\r\n}\r\n\r\n// This function refresh the token if necessary\r\nconst isTokenValid = async (req: FleuryInterceptorRequest): Promise<FleuryInterceptorRequest> => {\r\n    return new Promise((resolve) => {\r\n        req.fleuryHttpEvents.isReady\r\n        .pipe(\r\n            filter(value => value),\r\n            take(1)\r\n        ).subscribe(() => {\r\n            if (!req.oauthService.isTokenValid()) req.oauthService.refreshToken();\r\n            resolve(req);\r\n        });\r\n    });\r\n}\r\n\r\n// Se dominio eh o mesmo do gateway entao continuar interceptor\r\nconst insertAccessToken = async (req: FleuryInterceptorRequest): Promise<FleuryInterceptorRequest> => {\r\n    return new Promise((resolve) => {\r\n        req.fleuryHttpEvents.isReady\r\n        .pipe(\r\n            filter(value => value),\r\n            take(1),\r\n        ).subscribe(() => {\r\n            req.headers['access_token'] = req.oauthService.getAccessToken();\r\n            req.headers['client_id'] = req.oauthService.getApplicationId();\r\n            resolve(req);\r\n        });\r\n    });\r\n};\r\n\r\nexport const preModifiers: Array<(req: FleuryInterceptorRequest) => Promise<FleuryInterceptorRequest>> = [\r\n    insertBaseUrl,\r\n    isTokenValid,\r\n    insertAccessToken\r\n];","import { FleuryInterceptorResponse } from '../interfaces/iintercetors';\r\n\r\nconst verifyResponseStatus = (res: FleuryInterceptorResponse): boolean => {\r\n    if (res.status === 401) res.oauthService.refreshToken();\r\n    return true;\r\n};\r\n\r\nexport const posValidators: Array<(res: FleuryInterceptorResponse) => boolean> = [\r\n    verifyResponseStatus\r\n];","import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { IInterceptorService } from '../interfaces/iintercetors';\r\nimport { FleuryHttpEvents } from '../../events/fleury-http-events';\r\nimport { OauthService } from '../../oauth/oauth-service';\r\nimport { IFleuryHttp } from '../../../interfaces/ifleury-http';\r\nimport { FleuryInterceptorRequest } from '../interfaces/iintercetors';\r\n\r\nimport { preValidators } from '../pre/validators';\r\nimport { preModifiers } from '../pre/modifiers';\r\nimport { posValidators } from '../pos/validators';\r\n\r\nexport class AxiosInterceptor implements IInterceptorService {\r\n    constructor(\r\n        private config: IFleuryHttp,\r\n        private fleuryHttpEvents: FleuryHttpEvents,\r\n        private oauthService: OauthService\r\n    ) {}\r\n\r\n    requestTransformation(httpRequest: AxiosRequestConfig): FleuryInterceptorRequest {\r\n        const hasBaseUrl = httpRequest.url.indexOf(this.config.baseUrl);\r\n        const addBaseUrl = hasBaseUrl === -1 ? this.config.baseUrl : '';\r\n        \r\n        return {\r\n            baseUrl: this.config.baseUrl,\r\n            headers: httpRequest.headers,\r\n            url: addBaseUrl + httpRequest.url,\r\n            body: httpRequest.data,\r\n            fleuryHttpEvents: this.fleuryHttpEvents,\r\n            oauthService: this.oauthService\r\n        };\r\n    }\r\n\r\n    handle(instance: AxiosInstance) {\r\n        instance.interceptors.request.use((req) => this.preValidators(req));\r\n        instance.interceptors.response.use((req) => this.posValidators(req));\r\n    }\r\n\r\n    private async preModifiers(httpRequest: AxiosRequestConfig): Promise<AxiosRequestConfig> {\r\n        let req = this.requestTransformation(httpRequest);\r\n        \r\n        for (let fn of preModifiers) {\r\n            req = await fn(req);\r\n        }\r\n\r\n        httpRequest.headers = req.headers;\r\n        httpRequest.data = req.body;\r\n        httpRequest.url = req.url;\r\n\r\n        return httpRequest;\r\n    }\r\n\r\n    private async preValidators(httpRequest: AxiosRequestConfig): Promise<AxiosRequestConfig> {\r\n        const req = this.requestTransformation(httpRequest);\r\n\r\n        const error = preValidators.find(fn => {\r\n            return fn(req) === false;\r\n        });\r\n\r\n        return error ? httpRequest : this.preModifiers(httpRequest)\r\n    }\r\n\r\n    private async posValidators(httpResponse: AxiosResponse): Promise<AxiosResponse> {\r\n        posValidators.forEach((fn) => {\r\n            fn({\r\n                oauthService: this.oauthService,\r\n                status: httpResponse.status\r\n            });\r\n        });\r\n\r\n        return httpResponse;\r\n    }\r\n}","import { IFleuryHttp, IInstance, InstanceType } from '../../interfaces/ifleury-http';\r\nimport { AxiosInterceptor } from './implementations/interceptor-axios';\r\nimport { FleuryHttpEvents } from '../events/fleury-http-events';\r\nimport { OauthService } from '../oauth/oauth-service';\r\n\r\nexport class InterceptorService {\r\n\r\n    private axiosInterceptor: AxiosInterceptor;\r\n\r\n    constructor(\r\n        private config: IFleuryHttp,\r\n        private fleuryHttpEvents: FleuryHttpEvents,\r\n        private ouathService: OauthService\r\n    ) {\r\n        this.axiosInterceptor = new AxiosInterceptor(this.config, this.fleuryHttpEvents, this.ouathService);\r\n        if (Array.isArray(this.config.instances)) this.config.instances.forEach(i => this.handleInstance(i));\r\n    }\r\n\r\n    private handleInstance(instance: IInstance) {\r\n        switch (instance.type) {\r\n            case InstanceType.Axios:\r\n            default:\r\n                this.axiosInterceptor.handle(instance.value);\r\n        }\r\n    }\r\n\r\n    private checkIfInstanceAlreadyExists(instance: IInstance): boolean {\r\n        const found = this.config.instances.find((i: IInstance) => {\r\n            return i.value === instance.value;\r\n        });\r\n\r\n        return !!found;\r\n    }\r\n\r\n    addInstance(instance: IInstance): void {\r\n        if (!Array.isArray(this.config.instances)) this.config.instances = [];\r\n        if (this.checkIfInstanceAlreadyExists(instance)) return;\r\n        this.handleInstance(instance);\r\n        this.config.instances.push(instance);\r\n    }\r\n}","import { BehaviorSubject, Subject, Observable } from \"rxjs\";\r\n\r\nexport interface IFleuryHttpEvents {\r\n    onError: Observable<any>;\r\n    isReady: Observable<boolean>;\r\n}\r\n\r\nexport class FleuryHttpEvents {\r\n    // Event to emit when Oauth fails\r\n    public onError:Subject<any> = new Subject();\r\n    \r\n    // Event to know if client is ready to make request\r\n    // Get the oauth token if ready\r\n    public isReady: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n}","import { IFleuryHttp, IInstance, IFleuryHttpConnector } from './interfaces/ifleury-http';\r\nimport { IHttpClientService } from './features/httpClient/interfaces/ihttp-client';\r\nimport HttpClientFactory from './features/httpClient/http-client-factory';\r\nimport { OauthService } from './features/oauth/oauth-service';\r\nimport { StorageFactory } from './features/storage/storage-factory';\r\nimport { InterceptorService } from './features/interceptors/interceptor-service';\r\nimport { FleuryHttpEvents, IFleuryHttpEvents } from './features/events/fleury-http-events';\r\nimport { IStorageService } from './features/storage/interfaces/istorage';\r\n\r\nexport class FleuryHttp {\r\n    public fleuryHttpEvents: FleuryHttpEvents = new FleuryHttpEvents();\r\n\r\n    private httpClientService: IHttpClientService;\r\n\r\n    private storageService: IStorageService;\r\n\r\n    public oauthService: OauthService;\r\n\r\n    public interceptorService: InterceptorService;\r\n\r\n    constructor(private config: IFleuryHttp) {\r\n        this.httpClientService = HttpClientFactory.createHttpService(this.config);\r\n        this.storageService = StorageFactory.createStorageService(this.config);\r\n        \r\n        this.oauthService = new OauthService(\r\n            this.config,\r\n            this.fleuryHttpEvents,\r\n            this.httpClientService,\r\n            this.storageService\r\n        );\r\n\r\n        this.interceptorService = new InterceptorService(\r\n            this.config,\r\n            this.fleuryHttpEvents,\r\n            this.oauthService\r\n        );\r\n    }\r\n}\r\n\r\nconst FleuryHttpSingleton = (function(){\r\n    let fleuryhttpConnector: IFleuryHttpConnector;\r\n    \r\n    let instance: FleuryHttp = null;\r\n\r\n    let events: IFleuryHttpEvents;\r\n\r\n    return function(fleuryHttp) {\r\n        if (instance) return fleuryhttpConnector;\r\n        \r\n        instance = fleuryHttp;\r\n\r\n        if (!instance) return null;\r\n\r\n        events = {\r\n            isReady: instance.fleuryHttpEvents.isReady.asObservable(),\r\n            onError: instance.fleuryHttpEvents.onError.asObservable()\r\n        };\r\n\r\n        fleuryhttpConnector = {\r\n            addInstance: (httpInstance: IInstance) => {\r\n                instance.interceptorService.addInstance(httpInstance);\r\n            },\r\n            events: events\r\n        }\r\n\r\n        return fleuryhttpConnector;\r\n    };\r\n})();\r\n\r\nexport class FleuryHttpFactory {\r\n    public static createFleuryHttp(config: IFleuryHttp): IFleuryHttpConnector {\r\n        if (!FleuryHttpSingleton(null)) {\r\n            FleuryHttpSingleton(new FleuryHttp(config));\r\n        }\r\n\r\n        return FleuryHttpSingleton(null);\r\n    }\r\n}","/*\n * Public API Surface of fleury-http\n */\n\nimport { FleuryHttpFactory } from './lib/fleury-http';\nimport { IFleuryHttp, InstanceType, IFleuryHttpConnector } from './lib/interfaces/ifleury-http';\nimport { OauthFlows } from './lib/features/oauth/interfaces/ioauth';\nimport { StorageType } from './lib/features/storage/interfaces/istorage';\n\nexport { IFleuryHttpEvents } from './lib/features/events/fleury-http-events';\nexport { FleuryHttpFactory, IFleuryHttpConnector, IFleuryHttp, OauthFlows, StorageType, InstanceType };\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}