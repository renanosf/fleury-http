import HttpClientFactory from './features/httpClient/http-client-factory';
import { OauthService } from './features/oauth/oauth-service';
import { StorageFactory } from './features/storage/storage-factory';
import { InterceptorService } from './features/interceptors/interceptor-service';
import { FleuryHttpEvents } from './features/events/fleury-http-events';
export class FleuryHttp {
    constructor(config) {
        this.config = config;
        this.fleuryHttpEvents = new FleuryHttpEvents();
        this.httpClientService = HttpClientFactory.createHttpService(this.config);
        this.storageService = StorageFactory.createStorageService(this.config);
        this.oauthService = new OauthService(this.config, this.fleuryHttpEvents, this.httpClientService, this.storageService);
        this.interceptorService = new InterceptorService(this.config, this.fleuryHttpEvents, this.oauthService);
    }
}
const FleuryHttpSingleton = (function () {
    let fleuryhttpConnector;
    let instance = null;
    let events;
    return function (fleuryHttp) {
        if (instance)
            return fleuryhttpConnector;
        instance = fleuryHttp;
        if (!instance)
            return null;
        events = {
            isReady: instance.fleuryHttpEvents.isReady.asObservable(),
            onError: instance.fleuryHttpEvents.onError.asObservable()
        };
        fleuryhttpConnector = {
            addInstance: (httpInstance) => {
                instance.interceptorService.addInstance(httpInstance);
            },
            events: events
        };
        return fleuryhttpConnector;
    };
})();
export class FleuryHttpFactory {
    static createFleuryHttp(config) {
        if (!FleuryHttpSingleton(null)) {
            FleuryHttpSingleton(new FleuryHttp(config));
        }
        return FleuryHttpSingleton(null);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxldXJ5LWh0dHAuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUmVuYW4vcHJvamVjdHMvZmxldXJ5L2xpYnJhcmllcy9teS13b3Jrc3BhY2UvcHJvamVjdHMvZmxldXJ5LWh0dHAvc3JjLyIsInNvdXJjZXMiOlsibGliL2ZsZXVyeS1odHRwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8saUJBQWlCLE1BQU0sMkNBQTJDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNqRixPQUFPLEVBQUUsZ0JBQWdCLEVBQXFCLE1BQU0sc0NBQXNDLENBQUM7QUFHM0YsTUFBTSxPQUFPLFVBQVU7SUFXbkIsWUFBb0IsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQVZoQyxxQkFBZ0IsR0FBcUIsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBVy9ELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQ2hDLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxjQUFjLENBQ3RCLENBQUM7UUFFRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FDNUMsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLElBQUksQ0FBQyxZQUFZLENBQ3BCLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUM7SUFDekIsSUFBSSxtQkFBeUMsQ0FBQztJQUU5QyxJQUFJLFFBQVEsR0FBZSxJQUFJLENBQUM7SUFFaEMsSUFBSSxNQUF5QixDQUFDO0lBRTlCLE9BQU8sVUFBUyxVQUFVO1FBQ3RCLElBQUksUUFBUTtZQUFFLE9BQU8sbUJBQW1CLENBQUM7UUFFekMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUV0QixJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRTNCLE1BQU0sR0FBRztZQUNMLE9BQU8sRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN6RCxPQUFPLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7U0FDNUQsQ0FBQztRQUVGLG1CQUFtQixHQUFHO1lBQ2xCLFdBQVcsRUFBRSxDQUFDLFlBQXVCLEVBQUUsRUFBRTtnQkFDckMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxRCxDQUFDO1lBQ0QsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQTtRQUVELE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLE1BQU0sT0FBTyxpQkFBaUI7SUFDbkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQW1CO1FBQzlDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixtQkFBbUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRmxldXJ5SHR0cCwgSUluc3RhbmNlLCBJRmxldXJ5SHR0cENvbm5lY3RvciB9IGZyb20gJy4vaW50ZXJmYWNlcy9pZmxldXJ5LWh0dHAnO1xyXG5pbXBvcnQgeyBJSHR0cENsaWVudFNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL2h0dHBDbGllbnQvaW50ZXJmYWNlcy9paHR0cC1jbGllbnQnO1xyXG5pbXBvcnQgSHR0cENsaWVudEZhY3RvcnkgZnJvbSAnLi9mZWF0dXJlcy9odHRwQ2xpZW50L2h0dHAtY2xpZW50LWZhY3RvcnknO1xyXG5pbXBvcnQgeyBPYXV0aFNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL29hdXRoL29hdXRoLXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlRmFjdG9yeSB9IGZyb20gJy4vZmVhdHVyZXMvc3RvcmFnZS9zdG9yYWdlLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBJbnRlcmNlcHRvclNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL2ludGVyY2VwdG9ycy9pbnRlcmNlcHRvci1zZXJ2aWNlJztcclxuaW1wb3J0IHsgRmxldXJ5SHR0cEV2ZW50cywgSUZsZXVyeUh0dHBFdmVudHMgfSBmcm9tICcuL2ZlYXR1cmVzL2V2ZW50cy9mbGV1cnktaHR0cC1ldmVudHMnO1xyXG5pbXBvcnQgeyBJU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL3N0b3JhZ2UvaW50ZXJmYWNlcy9pc3RvcmFnZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmxldXJ5SHR0cCB7XHJcbiAgICBwdWJsaWMgZmxldXJ5SHR0cEV2ZW50czogRmxldXJ5SHR0cEV2ZW50cyA9IG5ldyBGbGV1cnlIdHRwRXZlbnRzKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50U2VydmljZTogSUh0dHBDbGllbnRTZXJ2aWNlO1xyXG5cclxuICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IElTdG9yYWdlU2VydmljZTtcclxuXHJcbiAgICBwdWJsaWMgb2F1dGhTZXJ2aWNlOiBPYXV0aFNlcnZpY2U7XHJcblxyXG4gICAgcHVibGljIGludGVyY2VwdG9yU2VydmljZTogSW50ZXJjZXB0b3JTZXJ2aWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBJRmxldXJ5SHR0cCkge1xyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudFNlcnZpY2UgPSBIdHRwQ2xpZW50RmFjdG9yeS5jcmVhdGVIdHRwU2VydmljZSh0aGlzLmNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZSA9IFN0b3JhZ2VGYWN0b3J5LmNyZWF0ZVN0b3JhZ2VTZXJ2aWNlKHRoaXMuY29uZmlnKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm9hdXRoU2VydmljZSA9IG5ldyBPYXV0aFNlcnZpY2UoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICB0aGlzLmZsZXVyeUh0dHBFdmVudHMsXHJcbiAgICAgICAgICAgIHRoaXMuaHR0cENsaWVudFNlcnZpY2UsXHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2VcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmludGVyY2VwdG9yU2VydmljZSA9IG5ldyBJbnRlcmNlcHRvclNlcnZpY2UoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICB0aGlzLmZsZXVyeUh0dHBFdmVudHMsXHJcbiAgICAgICAgICAgIHRoaXMub2F1dGhTZXJ2aWNlXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgRmxldXJ5SHR0cFNpbmdsZXRvbiA9IChmdW5jdGlvbigpe1xyXG4gICAgbGV0IGZsZXVyeWh0dHBDb25uZWN0b3I6IElGbGV1cnlIdHRwQ29ubmVjdG9yO1xyXG4gICAgXHJcbiAgICBsZXQgaW5zdGFuY2U6IEZsZXVyeUh0dHAgPSBudWxsO1xyXG5cclxuICAgIGxldCBldmVudHM6IElGbGV1cnlIdHRwRXZlbnRzO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbihmbGV1cnlIdHRwKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlKSByZXR1cm4gZmxldXJ5aHR0cENvbm5lY3RvcjtcclxuICAgICAgICBcclxuICAgICAgICBpbnN0YW5jZSA9IGZsZXVyeUh0dHA7XHJcblxyXG4gICAgICAgIGlmICghaW5zdGFuY2UpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBldmVudHMgPSB7XHJcbiAgICAgICAgICAgIGlzUmVhZHk6IGluc3RhbmNlLmZsZXVyeUh0dHBFdmVudHMuaXNSZWFkeS5hc09ic2VydmFibGUoKSxcclxuICAgICAgICAgICAgb25FcnJvcjogaW5zdGFuY2UuZmxldXJ5SHR0cEV2ZW50cy5vbkVycm9yLmFzT2JzZXJ2YWJsZSgpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZmxldXJ5aHR0cENvbm5lY3RvciA9IHtcclxuICAgICAgICAgICAgYWRkSW5zdGFuY2U6IChodHRwSW5zdGFuY2U6IElJbnN0YW5jZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaW50ZXJjZXB0b3JTZXJ2aWNlLmFkZEluc3RhbmNlKGh0dHBJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV2ZW50czogZXZlbnRzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmxldXJ5aHR0cENvbm5lY3RvcjtcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgRmxldXJ5SHR0cEZhY3Rvcnkge1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGbGV1cnlIdHRwKGNvbmZpZzogSUZsZXVyeUh0dHApOiBJRmxldXJ5SHR0cENvbm5lY3RvciB7XHJcbiAgICAgICAgaWYgKCFGbGV1cnlIdHRwU2luZ2xldG9uKG51bGwpKSB7XHJcbiAgICAgICAgICAgIEZsZXVyeUh0dHBTaW5nbGV0b24obmV3IEZsZXVyeUh0dHAoY29uZmlnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gRmxldXJ5SHR0cFNpbmdsZXRvbihudWxsKTtcclxuICAgIH1cclxufSJdfQ==