import HttpClientFactory from './features/httpClient/http-client-factory';
import { OauthService } from './features/oauth/oauth-service';
import { StorageFactory } from './features/storage/storage-factory';
import { InterceptorService } from './features/interceptors/interceptor-service';
import { FleuryHttpEvents } from './features/events/fleury-http-events';
class FleuryHttp {
    constructor(config) {
        this.config = config;
        this.fleuryHttpEvents = new FleuryHttpEvents();
        this.httpClientService = HttpClientFactory.createHttpService(this.config);
        this.storageService = StorageFactory.createStorageService(this.config);
        this.oauthService = new OauthService(this.config, this.fleuryHttpEvents, this.httpClientService, this.storageService);
        this.interceptorService = new InterceptorService(this.config, this.fleuryHttpEvents, this.oauthService);
    }
}
const FleuryHttpSingleton = (function () {
    let fleuryhttpConnector;
    let instance = null;
    let events;
    return function (fleuryHttp) {
        if (instance)
            return fleuryhttpConnector;
        instance = fleuryHttp;
        if (!instance)
            return null;
        events = {
            isReady: instance.fleuryHttpEvents.isReady.asObservable(),
            onError: instance.fleuryHttpEvents.onError.asObservable()
        };
        fleuryhttpConnector = {
            addInstance: (httpInstance) => {
                instance.interceptorService.addInstance(httpInstance);
            },
            events: events
        };
        return fleuryhttpConnector;
    };
})();
export class FleuryHttpFactory {
    static createFleuryHttp(config) {
        if (!FleuryHttpSingleton(null)) {
            FleuryHttpSingleton(new FleuryHttp(config));
        }
        return FleuryHttpSingleton(null);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxldXJ5LWh0dHAuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUmVuYW4vcHJvamVjdHMvZmxldXJ5L2xpYnJhcmllcy9teS13b3Jrc3BhY2UvcHJvamVjdHMvZmxldXJ5LWh0dHAvc3JjLyIsInNvdXJjZXMiOlsibGliL2ZsZXVyeS1odHRwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8saUJBQWlCLE1BQU0sMkNBQTJDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNqRixPQUFPLEVBQUUsZ0JBQWdCLEVBQXFCLE1BQU0sc0NBQXNDLENBQUM7QUFHM0YsTUFBTSxVQUFVO0lBV1osWUFBb0IsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQVZoQyxxQkFBZ0IsR0FBcUIsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1FBVy9ELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQ2hDLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksQ0FBQyxjQUFjLENBQ3RCLENBQUM7UUFFRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FDNUMsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLElBQUksQ0FBQyxZQUFZLENBQ3BCLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUM7SUFDekIsSUFBSSxtQkFBeUMsQ0FBQztJQUU5QyxJQUFJLFFBQVEsR0FBZSxJQUFJLENBQUM7SUFFaEMsSUFBSSxNQUF5QixDQUFDO0lBRTlCLE9BQU8sVUFBUyxVQUFVO1FBQ3RCLElBQUksUUFBUTtZQUFFLE9BQU8sbUJBQW1CLENBQUM7UUFFekMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUV0QixJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRTNCLE1BQU0sR0FBRztZQUNMLE9BQU8sRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN6RCxPQUFPLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7U0FDNUQsQ0FBQztRQUVGLG1CQUFtQixHQUFHO1lBQ2xCLFdBQVcsRUFBRSxDQUFDLFlBQXVCLEVBQUUsRUFBRTtnQkFDckMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxRCxDQUFDO1lBQ0QsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQTtRQUVELE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLE1BQU0sT0FBTyxpQkFBaUI7SUFDbkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQW1CO1FBQzlDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixtQkFBbUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRmxldXJ5SHR0cCwgSUluc3RhbmNlLCBJRmxldXJ5SHR0cENvbm5lY3RvciB9IGZyb20gJy4vaW50ZXJmYWNlcy9pZmxldXJ5LWh0dHAnO1xyXG5pbXBvcnQgeyBJSHR0cENsaWVudFNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL2h0dHBDbGllbnQvaW50ZXJmYWNlcy9paHR0cC1jbGllbnQnO1xyXG5pbXBvcnQgSHR0cENsaWVudEZhY3RvcnkgZnJvbSAnLi9mZWF0dXJlcy9odHRwQ2xpZW50L2h0dHAtY2xpZW50LWZhY3RvcnknO1xyXG5pbXBvcnQgeyBPYXV0aFNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL29hdXRoL29hdXRoLXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdG9yYWdlRmFjdG9yeSB9IGZyb20gJy4vZmVhdHVyZXMvc3RvcmFnZS9zdG9yYWdlLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBJbnRlcmNlcHRvclNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL2ludGVyY2VwdG9ycy9pbnRlcmNlcHRvci1zZXJ2aWNlJztcclxuaW1wb3J0IHsgRmxldXJ5SHR0cEV2ZW50cywgSUZsZXVyeUh0dHBFdmVudHMgfSBmcm9tICcuL2ZlYXR1cmVzL2V2ZW50cy9mbGV1cnktaHR0cC1ldmVudHMnO1xyXG5pbXBvcnQgeyBJU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL2ZlYXR1cmVzL3N0b3JhZ2UvaW50ZXJmYWNlcy9pc3RvcmFnZSc7XHJcblxyXG5jbGFzcyBGbGV1cnlIdHRwIHtcclxuICAgIHB1YmxpYyBmbGV1cnlIdHRwRXZlbnRzOiBGbGV1cnlIdHRwRXZlbnRzID0gbmV3IEZsZXVyeUh0dHBFdmVudHMoKTtcclxuXHJcbiAgICBwcml2YXRlIGh0dHBDbGllbnRTZXJ2aWNlOiBJSHR0cENsaWVudFNlcnZpY2U7XHJcblxyXG4gICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogSVN0b3JhZ2VTZXJ2aWNlO1xyXG5cclxuICAgIHB1YmxpYyBvYXV0aFNlcnZpY2U6IE9hdXRoU2VydmljZTtcclxuXHJcbiAgICBwdWJsaWMgaW50ZXJjZXB0b3JTZXJ2aWNlOiBJbnRlcmNlcHRvclNlcnZpY2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWc6IElGbGV1cnlIdHRwKSB7XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50U2VydmljZSA9IEh0dHBDbGllbnRGYWN0b3J5LmNyZWF0ZUh0dHBTZXJ2aWNlKHRoaXMuY29uZmlnKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlID0gU3RvcmFnZUZhY3RvcnkuY3JlYXRlU3RvcmFnZVNlcnZpY2UodGhpcy5jb25maWcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMub2F1dGhTZXJ2aWNlID0gbmV3IE9hdXRoU2VydmljZShcclxuICAgICAgICAgICAgdGhpcy5jb25maWcsXHJcbiAgICAgICAgICAgIHRoaXMuZmxldXJ5SHR0cEV2ZW50cyxcclxuICAgICAgICAgICAgdGhpcy5odHRwQ2xpZW50U2VydmljZSxcclxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuaW50ZXJjZXB0b3JTZXJ2aWNlID0gbmV3IEludGVyY2VwdG9yU2VydmljZShcclxuICAgICAgICAgICAgdGhpcy5jb25maWcsXHJcbiAgICAgICAgICAgIHRoaXMuZmxldXJ5SHR0cEV2ZW50cyxcclxuICAgICAgICAgICAgdGhpcy5vYXV0aFNlcnZpY2VcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBGbGV1cnlIdHRwU2luZ2xldG9uID0gKGZ1bmN0aW9uKCl7XHJcbiAgICBsZXQgZmxldXJ5aHR0cENvbm5lY3RvcjogSUZsZXVyeUh0dHBDb25uZWN0b3I7XHJcbiAgICBcclxuICAgIGxldCBpbnN0YW5jZTogRmxldXJ5SHR0cCA9IG51bGw7XHJcblxyXG4gICAgbGV0IGV2ZW50czogSUZsZXVyeUh0dHBFdmVudHM7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZsZXVyeUh0dHApIHtcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHJldHVybiBmbGV1cnlodHRwQ29ubmVjdG9yO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGluc3RhbmNlID0gZmxldXJ5SHR0cDtcclxuXHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGV2ZW50cyA9IHtcclxuICAgICAgICAgICAgaXNSZWFkeTogaW5zdGFuY2UuZmxldXJ5SHR0cEV2ZW50cy5pc1JlYWR5LmFzT2JzZXJ2YWJsZSgpLFxyXG4gICAgICAgICAgICBvbkVycm9yOiBpbnN0YW5jZS5mbGV1cnlIdHRwRXZlbnRzLm9uRXJyb3IuYXNPYnNlcnZhYmxlKClcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmbGV1cnlodHRwQ29ubmVjdG9yID0ge1xyXG4gICAgICAgICAgICBhZGRJbnN0YW5jZTogKGh0dHBJbnN0YW5jZTogSUluc3RhbmNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbnRlcmNlcHRvclNlcnZpY2UuYWRkSW5zdGFuY2UoaHR0cEluc3RhbmNlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXZlbnRzOiBldmVudHNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmbGV1cnlodHRwQ29ubmVjdG9yO1xyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBGbGV1cnlIdHRwRmFjdG9yeSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZsZXVyeUh0dHAoY29uZmlnOiBJRmxldXJ5SHR0cCk6IElGbGV1cnlIdHRwQ29ubmVjdG9yIHtcclxuICAgICAgICBpZiAoIUZsZXVyeUh0dHBTaW5nbGV0b24obnVsbCkpIHtcclxuICAgICAgICAgICAgRmxldXJ5SHR0cFNpbmdsZXRvbihuZXcgRmxldXJ5SHR0cChjb25maWcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBGbGV1cnlIdHRwU2luZ2xldG9uKG51bGwpO1xyXG4gICAgfVxyXG59Il19