import { InstanceType } from '../../interfaces/ifleury-http';
import { AxiosInterceptor } from './implementations/interceptor-axios';
export class InterceptorService {
    constructor(config, fleuryHttpEvents, ouathService) {
        this.config = config;
        this.fleuryHttpEvents = fleuryHttpEvents;
        this.ouathService = ouathService;
        this.axiosInterceptor = new AxiosInterceptor(this.config, this.fleuryHttpEvents, this.ouathService);
        if (Array.isArray(this.config.instances))
            this.config.instances.forEach(i => this.handleInstance(i));
    }
    handleInstance(instance) {
        switch (instance.type) {
            case InstanceType.Axios:
            default:
                this.axiosInterceptor.handle(instance.value);
        }
    }
    checkIfInstanceAlreadyExists(instance) {
        const found = this.config.instances.find((i) => {
            return i.value === instance.value;
        });
        return !!found;
    }
    addInstance(instance) {
        if (!Array.isArray(this.config.instances))
            this.config.instances = [];
        if (this.checkIfInstanceAlreadyExists(instance))
            return;
        this.handleInstance(instance);
        this.config.instances.push(instance);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3Itc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9SZW5hbi9wcm9qZWN0cy9mbGV1cnkvbGlicmFyaWVzL215LXdvcmtzcGFjZS9wcm9qZWN0cy9mbGV1cnktaHR0cC9zcmMvIiwic291cmNlcyI6WyJsaWIvZmVhdHVyZXMvaW50ZXJjZXB0b3JzL2ludGVyY2VwdG9yLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEwQixZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUl2RSxNQUFNLE9BQU8sa0JBQWtCO0lBSTNCLFlBQ1ksTUFBbUIsRUFDbkIsZ0JBQWtDLEVBQ2xDLFlBQTBCO1FBRjFCLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUVsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFTyxjQUFjLENBQUMsUUFBbUI7UUFDdEMsUUFBUSxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ25CLEtBQUssWUFBWSxDQUFDLEtBQUssQ0FBQztZQUN4QjtnQkFDSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwRDtJQUNMLENBQUM7SUFFTyw0QkFBNEIsQ0FBQyxRQUFtQjtRQUNwRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFZLEVBQUUsRUFBRTtZQUN0RCxPQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLEtBQUssQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQW1CO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3RFLElBQUksSUFBSSxDQUFDLDRCQUE0QixDQUFDLFFBQVEsQ0FBQztZQUFFLE9BQU87UUFDeEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUZsZXVyeUh0dHAsIElJbnN0YW5jZSwgSW5zdGFuY2VUeXBlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9pZmxldXJ5LWh0dHAnO1xyXG5pbXBvcnQgeyBBeGlvc0ludGVyY2VwdG9yIH0gZnJvbSAnLi9pbXBsZW1lbnRhdGlvbnMvaW50ZXJjZXB0b3ItYXhpb3MnO1xyXG5pbXBvcnQgeyBGbGV1cnlIdHRwRXZlbnRzIH0gZnJvbSAnLi4vZXZlbnRzL2ZsZXVyeS1odHRwLWV2ZW50cyc7XHJcbmltcG9ydCB7IE9hdXRoU2VydmljZSB9IGZyb20gJy4uL29hdXRoL29hdXRoLXNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEludGVyY2VwdG9yU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBheGlvc0ludGVyY2VwdG9yOiBBeGlvc0ludGVyY2VwdG9yO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgY29uZmlnOiBJRmxldXJ5SHR0cCxcclxuICAgICAgICBwcml2YXRlIGZsZXVyeUh0dHBFdmVudHM6IEZsZXVyeUh0dHBFdmVudHMsXHJcbiAgICAgICAgcHJpdmF0ZSBvdWF0aFNlcnZpY2U6IE9hdXRoU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5heGlvc0ludGVyY2VwdG9yID0gbmV3IEF4aW9zSW50ZXJjZXB0b3IodGhpcy5jb25maWcsIHRoaXMuZmxldXJ5SHR0cEV2ZW50cywgdGhpcy5vdWF0aFNlcnZpY2UpO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLmluc3RhbmNlcykpIHRoaXMuY29uZmlnLmluc3RhbmNlcy5mb3JFYWNoKGkgPT4gdGhpcy5oYW5kbGVJbnN0YW5jZShpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVJbnN0YW5jZShpbnN0YW5jZTogSUluc3RhbmNlKSB7XHJcbiAgICAgICAgc3dpdGNoIChpbnN0YW5jZS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSW5zdGFuY2VUeXBlLkF4aW9zOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5heGlvc0ludGVyY2VwdG9yLmhhbmRsZShpbnN0YW5jZS52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tJZkluc3RhbmNlQWxyZWFkeUV4aXN0cyhpbnN0YW5jZTogSUluc3RhbmNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZm91bmQgPSB0aGlzLmNvbmZpZy5pbnN0YW5jZXMuZmluZCgoaTogSUluc3RhbmNlKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpLnZhbHVlID09PSBpbnN0YW5jZS52YWx1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuICEhZm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSW5zdGFuY2UoaW5zdGFuY2U6IElJbnN0YW5jZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZy5pbnN0YW5jZXMpKSB0aGlzLmNvbmZpZy5pbnN0YW5jZXMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lmSW5zdGFuY2VBbHJlYWR5RXhpc3RzKGluc3RhbmNlKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlSW5zdGFuY2UoaW5zdGFuY2UpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcclxuICAgIH1cclxufSJdfQ==