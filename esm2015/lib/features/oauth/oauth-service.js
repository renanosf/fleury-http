import { __awaiter } from "tslib";
import { OauthFlows } from './interfaces/ioauth';
import { OauthSensediaService } from './implementations/oauth-sensedia-service';
export class OauthService {
    constructor(config, fleuryHttpEvents, httpClientService, storageService) {
        this.config = config;
        this.fleuryHttpEvents = fleuryHttpEvents;
        this.httpClientService = httpClientService;
        this.storageService = storageService;
        this.oauthProvider = new OauthSensediaService(this.config, this.httpClientService);
        this.clientId = this.config.oauth.application.clientId;
        const token = this.storageService.get(this.clientId);
        if (token)
            this.currentToken = JSON.parse(token);
        if (this.config.lazyAuhtorization) {
            this.fleuryHttpEvents.isReady.next(true);
        }
        else {
            if (!this.currentToken)
                this.refreshToken();
            else
                this.fleuryHttpEvents.isReady.next(true);
        }
    }
    grantFlow() {
        return __awaiter(this, void 0, void 0, function* () {
            const code = yield this.oauthProvider.callGrantCode();
            const response = yield this.oauthProvider.callAccessToken(code);
            this.currentToken = {
                accessToken: response.access_token,
                expires: new Date().getTime() + (response.expires_in * OauthService.MILLISECONDS),
                refreshToken: response.refresh_token
            };
            console.log(this.currentToken);
            this.storageService.set(this.clientId, JSON.stringify(this.currentToken));
            return this.currentToken.accessToken;
        });
    }
    implicitFlow() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.oauthProvider.callAccessTokenImplicit();
            this.currentToken = {
                accessToken: response.access_token,
                expires: new Date().getTime() + (response.expires_in * OauthService.MILLISECONDS),
            };
            this.storageService.set(this.clientId, JSON.stringify(this.currentToken));
            return this.currentToken.accessToken;
        });
    }
    isTokenValid() {
        return this.currentToken ? new Date().getTime() < this.currentToken.expires : false;
    }
    getAccessToken() {
        return this.currentToken.accessToken;
    }
    getApplicationId() {
        return this.clientId;
    }
    refreshToken() {
        let promise = null;
        this.fleuryHttpEvents.isReady.next(false);
        switch (this.config.oauth.flow) {
            case OauthFlows.IMPLICIT:
                promise = this.implicitFlow();
                break;
            case OauthFlows.GRANT:
            default:
                promise = this.grantFlow();
                break;
        }
        promise.then(() => {
            this.fleuryHttpEvents.isReady.next(true);
        }).catch((err) => {
            this.fleuryHttpEvents.onError.next(err);
        });
    }
}
OauthService.MILLISECONDS = 1000;
//# sourceMappingURL=data:application/json;base64,